version: '3.3'
services:
  check:
    image: check_service
    ports: 
      - "8130:8130"
    environment:
      - TARGET_ENV=test
  anomaly:
    image: anomaly_service
    ports: 
      - "8120:8120"
    depends_on:
      kafka:
        condition: "service_healthy"
    environment:
      - TARGET_ENV=test
    volumes:
      - /home/azureuser/config/anomaly:/config
      - /home/azureuser/logs:/logs
      - anomaly-db:/data
  dashboard:
    image: dashboard
    ports:
    - "3000:3000"
    depends_on:
    - "processing"
    - "analyzer"
  receiver:
    image: jordankennedy/services:receiver
    ports:
    - "8080:8080"
    depends_on:
      kafka:
        condition: "service_healthy"
    environment:
      - TARGET_ENV=test
    volumes:
      - /home/azureuser/config/receiver:/config
      - /home/azureuser/logs:/logs
  storage:
    image: jordankennedy/services:storage
    ports:
    - "8090:8090"
    depends_on:
      db:
        condition: "service_healthy"
      kafka:
        condition: "service_healthy"
    environment:
      - TARGET_ENV=test
    volumes:
      - /home/azureuser/config/storage:/config
      - /home/azureuser/logs:/logs
  processing:
    image: jordankennedy/services:processing
    ports:
    - "8100:8100"
    network_mode: "host"
    depends_on:
    - "storage"
    environment:
      - TARGET_ENV=test
    volumes:
      - /home/azureuser/config/processing:/config
      - /home/azureuser/logs:/logs
      - processing-db:/data
  analyzer:
    image: jordankennedy/services:analyzer
    ports:
    - "8110:8110"
    depends_on:
    - "kafka"
    environment:
      - TARGET_ENV=test
    volumes:
      - /home/azureuser/config/analyzer:/config
      - /home/azureuser/logs:/logs
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
    - "2181"
    hostname: zookeeper
    volumes:
    - /home/azureuser/zookeeper/data:/opt/zookeeper-3.4.13/data
  kafka:
    image: wurstmeister/kafka
    command: [start-kafka.sh]
    ports:
      - "9092:9092"
    hostname: kafka
    environment:
      KAFKA_CREATE_TOPICS: "events:1:1" # topic:partition:replicas
      KAFKA_ADVERTISED_HOST_NAME: "acit3855-lab06.eastus2.cloudapp.azure.com" # docker-machine ip
      KAFKA_LISTENERS: INSIDE://:29092,OUTSIDE://:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:29092,OUTSIDE://acit3855-lab06.eastus2.cloudapp.azure.com:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LOG_DIRS: /kafka/kafka-logs
      KAFKA_BROKER_ID: 1
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock
    - /home/azureuser/kafka:/kafka/kafka-logs
    healthcheck:
      test: ["CMD-SHELL", "nc -z kafka 29092 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 4
      start_period: 30s
    depends_on:
    - "zookeeper"
  db:
    image: mysql:5.7
    restart: always
    environment:
      MYSQL_DATABASE: 'vessel'
      # So you don't have to use root, but you can if you like
      # MYSQL_USER: 'root'
      # You can use whatever password you like
      # MYSQL_PASSWORD: 'password'
      # Password for root access
      MYSQL_ROOT_PASSWORD: 'password'
    ports:
    # <Port exposed> : < MySQL Port running inside container>
    - '3306:3306'
    expose:
    # Opens port 3306 on the container
    - '3306'
    # Where our data will be persisted
    volumes:
    - my-db:/var/lib/mysql
    # Names our volume
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
volumes:
  my-db:
  processing-db:
  anomaly-db:
